"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareFieldsArray = exports.shuffleArray = exports.flattenKeys = exports.compareItems = void 0;
const get_1 = __importDefault(require("lodash/get"));
const isEqual_1 = __importDefault(require("lodash/isEqual"));
const isObject_1 = __importDefault(require("lodash/isObject"));
const merge_1 = __importDefault(require("lodash/merge"));
const reduce_1 = __importDefault(require("lodash/reduce"));
const compareItems = (obj, obj2, keys, disableDotNotation, _node) => {
    let result = true;
    for (const key of keys) {
        if (!disableDotNotation) {
            if (!(0, isEqual_1.default)((0, get_1.default)(obj.json, key), (0, get_1.default)(obj2.json, key))) {
                result = false;
                break;
            }
        }
        else {
            if (!(0, isEqual_1.default)(obj.json[key], obj2.json[key])) {
                result = false;
                break;
            }
        }
    }
    return result;
};
exports.compareItems = compareItems;
const flattenKeys = (obj, path = []) => {
    return !(0, isObject_1.default)(obj)
        ? { [path.join('.')]: obj }
        : (0, reduce_1.default)(obj, (cum, next, key) => (0, merge_1.default)(cum, (0, exports.flattenKeys)(next, [...path, key])), {});
};
exports.flattenKeys = flattenKeys;
const shuffleArray = (array) => {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
};
exports.shuffleArray = shuffleArray;
const prepareFieldsArray = (fields, fieldName = 'Fields') => {
    if (typeof fields === 'string') {
        return fields
            .split(',')
            .map((entry) => entry.trim())
            .filter((entry) => entry !== '');
    }
    if (Array.isArray(fields)) {
        return fields;
    }
    throw new Error(`The \'${fieldName}\' parameter must be a string of fields separated by commas or an array of strings.`);
};
exports.prepareFieldsArray = prepareFieldsArray;
//# sourceMappingURL=utils.js.map