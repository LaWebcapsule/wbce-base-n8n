"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const utilities_1 = require("../../../../../utils/utilities");
const get_1 = __importDefault(require("lodash/get"));
const unset_1 = __importDefault(require("lodash/unset"));
const common_descriptions_1 = require("../common.descriptions");
const utils_1 = require("../../helpers/utils");
const properties = [
    {
        displayName: 'Fields To Split Out',
        name: 'fieldToSplitOut',
        type: 'string',
        default: '',
        required: true,
        description: 'The name of the input fields to break out into separate items',
        requiresDataPath: 'multiple',
    },
    {
        displayName: 'Include',
        name: 'include',
        type: 'options',
        options: [
            {
                name: 'No Other Fields',
                value: 'noOtherFields',
            },
            {
                name: 'All Other Fields',
                value: 'allOtherFields',
            },
            {
                name: 'Selected Other Fields',
                value: 'selectedOtherFields',
            },
        ],
        default: 'noOtherFields',
        description: 'Whether to copy any other fields into the new items',
    },
    {
        displayName: 'Fields To Include',
        name: 'fieldsToInclude',
        type: 'string',
        placeholder: 'e.g. email, name',
        requiresDataPath: 'multiple',
        description: 'Fields in the input items to aggregate together',
        default: '',
        displayOptions: {
            show: {
                include: ['selectedOtherFields'],
            },
        },
    },
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Field',
        default: {},
        options: [
            common_descriptions_1.disableDotNotationBoolean,
            {
                displayName: 'Destination Field Name',
                name: 'destinationFieldName',
                type: 'string',
                requiresDataPath: 'multiple',
                default: '',
                description: 'The field in the output under which to put the split field contents',
            },
        ],
    },
];
const displayOptions = {
    show: {
        resource: ['itemList'],
        operation: ['splitOutItems'],
    },
};
exports.description = (0, utilities_1.updateDisplayOptions)(displayOptions, properties);
async function execute(items) {
    const returnData = [];
    for (let i = 0; i < items.length; i++) {
        const fieldsToSplitOut = this.getNodeParameter('fieldToSplitOut', i)
            .split(',')
            .map((field) => field.trim());
        const disableDotNotation = this.getNodeParameter('options.disableDotNotation', 0, false);
        const destinationFields = this.getNodeParameter('options.destinationFieldName', i, '')
            .split(',')
            .filter((field) => field.trim() !== '')
            .map((field) => field.trim());
        if (destinationFields.length && destinationFields.length !== fieldsToSplitOut.length) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'If multiple fields to split out are given, the same number of destination fields must be given');
        }
        const include = this.getNodeParameter('include', i);
        const multiSplit = fieldsToSplitOut.length > 1;
        const item = { ...items[i].json };
        const splited = [];
        for (const [entryIndex, fieldToSplitOut] of fieldsToSplitOut.entries()) {
            const destinationFieldName = destinationFields[entryIndex] || '';
            let arrayToSplit;
            if (!disableDotNotation) {
                arrayToSplit = (0, get_1.default)(item, fieldToSplitOut);
            }
            else {
                arrayToSplit = item[fieldToSplitOut];
            }
            if (arrayToSplit === undefined) {
                arrayToSplit = [];
            }
            if (typeof arrayToSplit !== 'object' || arrayToSplit === null) {
                arrayToSplit = [arrayToSplit];
            }
            if (!Array.isArray(arrayToSplit)) {
                arrayToSplit = Object.values(arrayToSplit);
            }
            for (const [elementIndex, element] of arrayToSplit.entries()) {
                if (splited[elementIndex] === undefined) {
                    splited[elementIndex] = {};
                }
                const fieldName = destinationFieldName || fieldToSplitOut;
                if (typeof element === 'object' && element !== null && include === 'noOtherFields') {
                    if (destinationFieldName === '' && !multiSplit) {
                        splited[elementIndex] = { ...splited[elementIndex], ...element };
                    }
                    else {
                        splited[elementIndex][fieldName] = element;
                    }
                }
                else {
                    splited[elementIndex][fieldName] = element;
                }
            }
        }
        for (const splitEntry of splited) {
            let newItem = {};
            if (include === 'noOtherFields') {
                newItem = splitEntry;
            }
            if (include === 'allOtherFields') {
                const itemCopy = (0, n8n_workflow_1.deepCopy)(item);
                for (const fieldToSplitOut of fieldsToSplitOut) {
                    if (!disableDotNotation) {
                        (0, unset_1.default)(itemCopy, fieldToSplitOut);
                    }
                    else {
                        delete itemCopy[fieldToSplitOut];
                    }
                }
                newItem = { ...itemCopy, ...splitEntry };
            }
            if (include === 'selectedOtherFields') {
                const fieldsToInclude = (0, utils_1.prepareFieldsArray)(this.getNodeParameter('fieldsToInclude', i, ''), 'Fields To Include');
                if (!fieldsToInclude.length) {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No fields specified', {
                        description: 'Please add a field to include',
                    });
                }
                for (const field of fieldsToInclude) {
                    if (!disableDotNotation) {
                        splitEntry[field] = (0, get_1.default)(item, field);
                    }
                    else {
                        splitEntry[field] = item[field];
                    }
                }
                newItem = splitEntry;
            }
            returnData.push({
                json: newItem,
                pairedItem: {
                    item: i,
                },
            });
        }
    }
    return returnData;
}
exports.execute = execute;
//# sourceMappingURL=splitOutItems.operation.js.map