{"version":3,"sources":["../src/httpRequest.ts"],"sourcesContent":["import {\n  fetch,\n  getGlobalDispatcher,\n  setGlobalDispatcher,\n  Dispatcher,\n  ProxyAgent,\n} from 'undici'\n\nimport { URL } from 'node:url'\n\nconst proxyAgents = Object.fromEntries(\n  ['http', 'https'].map((protocol) => {\n    const uri = process.env[`${protocol}_proxy`]\n    if (uri) {\n      return [`${protocol}:`, new ProxyAgent(uri)]\n    }\n    return []\n  })\n)\n\nconst noProxyRules = (process.env['no_proxy'] ?? '')\n  .split(',')\n  .map((rule) => rule.trim())\n\nconst defaultDispatcher = getGlobalDispatcher()\n\nsetGlobalDispatcher(\n  new (class extends Dispatcher {\n    dispatch(options: any, handler: any) {\n      if (options.origin) {\n        const { host, protocol } =\n          typeof options.origin === 'string'\n            ? new URL(options.origin)\n            : options.origin\n        if (\n          !noProxyRules.some((rule) =>\n            rule.startsWith('.') ? host.endsWith(rule) : host === rule\n          )\n        ) {\n          const proxyAgent = proxyAgents[protocol]\n          if (proxyAgent) {\n            proxyAgent.dispatch(options, handler)\n          }\n        }\n      }\n      return defaultDispatcher.dispatch(options, handler)\n    }\n  })()\n)\n\nexport async function postRequest<T>(\n  url: string,\n  data: {},\n  options: {\n    timeoutInMs?: number\n  } = {}\n) {\n  const controller = new AbortController()\n\n  const timeout = setTimeout(() => {\n    controller.abort()\n  }, options.timeoutInMs ?? 30000)\n\n  try {\n    const response = await fetch(url, {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: { 'Content-Type': 'application/json' },\n      signal: controller.signal,\n    })\n\n    const responseJson = await response.json()\n\n    return {\n      status: response.status,\n      data: responseJson as T,\n    }\n  } catch (err) {\n    throw new Error('Connection Error', { cause: err })\n  } finally {\n    clearTimeout(timeout)\n  }\n}\n\nexport default {\n  postRequest,\n}\n"],"mappings":"AAAA,OACE,SAAAA,EACA,uBAAAC,EACA,uBAAAC,EACA,cAAAC,EACA,cAAAC,MACK,SAEP,OAAS,OAAAC,MAAW,MAEpB,IAAMC,EAAc,OAAO,YACzB,CAAC,OAAQ,OAAO,EAAE,IAAKC,GAAa,CAClC,IAAMC,EAAM,QAAQ,IAAI,GAAGD,WAC3B,OAAIC,EACK,CAAC,GAAGD,KAAa,IAAIH,EAAWI,CAAG,CAAC,EAEtC,CAAC,CACV,CAAC,CACH,EAEMC,GAAgB,QAAQ,IAAI,UAAe,IAC9C,MAAM,GAAG,EACT,IAAKC,GAASA,EAAK,KAAK,CAAC,EAEtBC,EAAoBV,EAAoB,EAE9CC,EACE,IAAK,cAAcC,CAAW,CAC5B,SAASS,EAAcC,EAAc,CACnC,GAAID,EAAQ,OAAQ,CAClB,GAAM,CAAE,KAAAE,EAAM,SAAAP,CAAS,EACrB,OAAOK,EAAQ,QAAW,SACtB,IAAIP,EAAIO,EAAQ,MAAM,EACtBA,EAAQ,OACd,GACE,CAACH,EAAa,KAAMC,GAClBA,EAAK,WAAW,GAAG,EAAII,EAAK,SAASJ,CAAI,EAAII,IAASJ,CACxD,EACA,CACA,IAAMK,EAAaT,EAAYC,GAC3BQ,GACFA,EAAW,SAASH,EAASC,CAAO,CAExC,CACF,CACA,OAAOF,EAAkB,SAASC,EAASC,CAAO,CACpD,CACF,CACF,EAEA,eAAsBG,EACpBC,EACAC,EACAN,EAEI,CAAC,EACL,CACA,IAAMO,EAAa,IAAI,gBAEjBC,EAAU,WAAW,IAAM,CAC/BD,EAAW,MAAM,CACnB,EAAGP,EAAQ,aAAe,GAAK,EAE/B,GAAI,CACF,IAAMS,EAAW,MAAMrB,EAAMiB,EAAK,CAChC,OAAQ,OACR,KAAM,KAAK,UAAUC,CAAI,EACzB,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,OAAQC,EAAW,MACrB,CAAC,EAEKG,EAAe,MAAMD,EAAS,KAAK,EAEzC,MAAO,CACL,OAAQA,EAAS,OACjB,KAAMC,CACR,CACF,OAASC,EAAP,CACA,MAAM,IAAI,MAAM,mBAAoB,CAAE,MAAOA,CAAI,CAAC,CACpD,QAAE,CACA,aAAaH,CAAO,CACtB,CACF,CAEA,IAAOI,EAAQ,CACb,YAAAR,CACF","names":["fetch","getGlobalDispatcher","setGlobalDispatcher","Dispatcher","ProxyAgent","URL","proxyAgents","protocol","uri","noProxyRules","rule","defaultDispatcher","options","handler","host","proxyAgent","postRequest","url","data","controller","timeout","response","responseJson","err","httpRequest_default"]}