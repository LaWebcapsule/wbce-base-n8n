"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reset = void 0;
const typedi_1 = require("typedi");
const typeorm_1 = require("typeorm");
const Db = __importStar(require("../../Db"));
const User_1 = require("../../databases/entities/User");
const BaseCommand_1 = require("../BaseCommand");
const role_service_1 = require("../../services/role.service");
const defaultUserProps = {
    firstName: null,
    lastName: null,
    email: null,
    password: null,
};
class Reset extends BaseCommand_1.BaseCommand {
    async run() {
        const owner = await this.getInstanceOwner();
        const ownerWorkflowRole = await typedi_1.Container.get(role_service_1.RoleService).findWorkflowOwnerRole();
        const ownerCredentialRole = await typedi_1.Container.get(role_service_1.RoleService).findCredentialOwnerRole();
        await Db.collections.SharedWorkflow.update({ userId: (0, typeorm_1.Not)(owner.id), roleId: ownerWorkflowRole.id }, { user: owner });
        await Db.collections.SharedCredentials.update({ userId: (0, typeorm_1.Not)(owner.id), roleId: ownerCredentialRole.id }, { user: owner });
        await Db.collections.User.delete({ id: (0, typeorm_1.Not)(owner.id) });
        await Db.collections.User.save(Object.assign(owner, defaultUserProps));
        const danglingCredentials = await Db.collections.Credentials.createQueryBuilder('credentials')
            .leftJoinAndSelect('credentials.shared', 'shared')
            .where('shared.credentialsId is null')
            .getMany();
        const newSharedCredentials = danglingCredentials.map((credentials) => Db.collections.SharedCredentials.create({
            credentials,
            user: owner,
            role: ownerCredentialRole,
        }));
        await Db.collections.SharedCredentials.save(newSharedCredentials);
        await Db.collections.Settings.update({ key: 'userManagement.isInstanceOwnerSetUp' }, { value: 'false' });
        this.logger.info('Successfully reset the database to default user state.');
    }
    async getInstanceOwner() {
        const globalRole = await typedi_1.Container.get(role_service_1.RoleService).findGlobalOwnerRole();
        const owner = await Db.collections.User.findOneBy({ globalRoleId: globalRole.id });
        if (owner)
            return owner;
        const user = new User_1.User();
        Object.assign(user, { ...defaultUserProps, globalRole });
        await Db.collections.User.save(user);
        return Db.collections.User.findOneByOrFail({ globalRoleId: globalRole.id });
    }
    async catch(error) {
        this.logger.error('Error resetting database. See log messages for details.');
        this.logger.error(error.message);
        this.exit(1);
    }
}
exports.Reset = Reset;
Reset.description = 'Resets the database to the default user state';
Reset.examples = ['$ n8n user-management:reset'];
//# sourceMappingURL=reset.js.map