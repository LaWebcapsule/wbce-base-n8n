import { Response, NextFunction } from 'express';
import { ILogger } from 'n8n-workflow';
import { SharedWorkflowRepository, WorkflowStatisticsRepository } from '../databases/repositories';
import { ExecutionRequest } from '../requests';
import type { IWorkflowStatisticsDataLoaded } from '../Interfaces';
interface WorkflowStatisticsData<T> {
    productionSuccess: T;
    productionError: T;
    manualSuccess: T;
    manualError: T;
}
export declare class WorkflowStatisticsController {
    private sharedWorkflowRepository;
    private workflowStatisticsRepository;
    private readonly logger;
    constructor(sharedWorkflowRepository: SharedWorkflowRepository, workflowStatisticsRepository: WorkflowStatisticsRepository, logger: ILogger);
    hasWorkflowAccess(req: ExecutionRequest.Get, res: Response, next: NextFunction): Promise<void>;
    getCounts(req: ExecutionRequest.Get): Promise<WorkflowStatisticsData<number>>;
    getTimes(req: ExecutionRequest.Get): Promise<WorkflowStatisticsData<Date | null>>;
    getDataLoaded(req: ExecutionRequest.Get): Promise<IWorkflowStatisticsDataLoaded>;
    private getData;
}
export {};
