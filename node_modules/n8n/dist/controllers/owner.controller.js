"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OwnerController = void 0;
const validator_1 = __importDefault(require("validator"));
const GenericHelpers_1 = require("../GenericHelpers");
const decorators_1 = require("../decorators");
const ResponseHelper_1 = require("../ResponseHelper");
const UserManagementHelper_1 = require("../UserManagement/UserManagementHelper");
const jwt_1 = require("../auth/jwt");
const user_service_1 = require("../services/user.service");
const typedi_1 = __importDefault(require("typedi"));
let OwnerController = exports.OwnerController = class OwnerController {
    constructor({ config, logger, internalHooks, repositories, postHog, }) {
        this.config = config;
        this.logger = logger;
        this.internalHooks = internalHooks;
        this.userService = typedi_1.default.get(user_service_1.UserService);
        this.settingsRepository = repositories.Settings;
        this.postHog = postHog;
    }
    async setupOwner(req, res) {
        const { email, firstName, lastName, password } = req.body;
        const { id: userId, globalRole } = req.user;
        if (this.config.getEnv('userManagement.isInstanceOwnerSetUp')) {
            this.logger.debug('Request to claim instance ownership failed because instance owner already exists', {
                userId,
            });
            throw new ResponseHelper_1.BadRequestError('Instance owner already setup');
        }
        if (!email || !validator_1.default.isEmail(email)) {
            this.logger.debug('Request to claim instance ownership failed because of invalid email', {
                userId,
                invalidEmail: email,
            });
            throw new ResponseHelper_1.BadRequestError('Invalid email address');
        }
        const validPassword = (0, UserManagementHelper_1.validatePassword)(password);
        if (!firstName || !lastName) {
            this.logger.debug('Request to claim instance ownership failed because of missing first name or last name in payload', { userId, payload: req.body });
            throw new ResponseHelper_1.BadRequestError('First and last names are mandatory');
        }
        if (globalRole.scope === 'global' && globalRole.name !== 'owner') {
            this.logger.debug('Request to claim instance ownership failed because user shell does not exist or has wrong role!', {
                userId,
            });
            throw new ResponseHelper_1.BadRequestError('Invalid request');
        }
        let owner = req.user;
        Object.assign(owner, {
            email,
            firstName,
            lastName,
            password: await (0, UserManagementHelper_1.hashPassword)(validPassword),
        });
        await (0, GenericHelpers_1.validateEntity)(owner);
        owner = await this.userService.save(owner);
        this.logger.info('Owner was set up successfully', { userId });
        await this.settingsRepository.update({ key: 'userManagement.isInstanceOwnerSetUp' }, { value: JSON.stringify(true) });
        this.config.set('userManagement.isInstanceOwnerSetUp', true);
        this.logger.debug('Setting isInstanceOwnerSetUp updated successfully', { userId });
        await (0, jwt_1.issueCookie)(res, owner);
        void this.internalHooks.onInstanceOwnerSetup({ user_id: userId });
        return (0, UserManagementHelper_1.withFeatureFlags)(this.postHog, (0, UserManagementHelper_1.sanitizeUser)(owner));
    }
    async dismissBanner(req) {
        const bannerName = 'banner' in req.body ? req.body.banner : '';
        const response = await this.settingsRepository.dismissBanner({ bannerName });
        return response;
    }
};
__decorate([
    (0, decorators_1.Post)('/setup'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], OwnerController.prototype, "setupOwner", null);
__decorate([
    (0, decorators_1.Post)('/dismiss-banner'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], OwnerController.prototype, "dismissBanner", null);
exports.OwnerController = OwnerController = __decorate([
    (0, decorators_1.Authorized)(['global', 'owner']),
    (0, decorators_1.RestController)('/owner'),
    __metadata("design:paramtypes", [Object])
], OwnerController);
//# sourceMappingURL=owner.controller.js.map