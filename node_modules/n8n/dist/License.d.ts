import type { TEntitlement, TLicenseBlock } from '@n8n_io/license-sdk';
import type { BooleanLicenseFeature, NumericLicenseFeature } from './Interfaces';
type FeatureReturnType = Partial<{
    planName: string;
} & {
    [K in NumericLicenseFeature]: number;
} & {
    [K in BooleanLicenseFeature]: boolean;
}>;
export declare class License {
    private logger;
    private manager;
    constructor();
    init(instanceId: string): Promise<void>;
    loadCertStr(): Promise<TLicenseBlock>;
    saveCertStr(value: TLicenseBlock): Promise<void>;
    activate(activationKey: string): Promise<void>;
    renew(): Promise<void>;
    isFeatureEnabled(feature: BooleanLicenseFeature): boolean;
    isSharingEnabled(): boolean;
    isLogStreamingEnabled(): boolean;
    isLdapEnabled(): boolean;
    isSamlEnabled(): boolean;
    isAdvancedExecutionFiltersEnabled(): boolean;
    isDebugInEditorLicensed(): boolean;
    isVariablesEnabled(): boolean;
    isSourceControlLicensed(): boolean;
    isWorkflowHistoryLicensed(): boolean;
    isAPIDisabled(): boolean;
    getCurrentEntitlements(): TEntitlement[];
    getFeatureValue<T extends keyof FeatureReturnType>(feature: T): FeatureReturnType[T];
    getManagementJwt(): string;
    getMainPlan(): TEntitlement | undefined;
    getUsersLimit(): number;
    getTriggerLimit(): number;
    getVariablesLimit(): number;
    getPlanName(): string;
    getInfo(): string;
    isWithinUsersLimit(): boolean;
}
export {};
