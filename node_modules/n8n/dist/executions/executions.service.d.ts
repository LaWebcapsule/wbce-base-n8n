import type { ExecutionStatus } from 'n8n-workflow';
import type { FindOperator } from 'typeorm';
import type { User } from '../databases/entities/User';
import type { IExecutionFlattedResponse, IExecutionResponse, IExecutionsListResponse } from '../Interfaces';
import type { ExecutionRequest } from '../requests';
export interface IGetExecutionsQueryFilter {
    id?: FindOperator<string> | string;
    finished?: boolean;
    mode?: string;
    retryOf?: string;
    retrySuccessId?: string;
    status?: ExecutionStatus[];
    workflowId?: string;
    waitTill?: FindOperator<any> | boolean;
    metadata?: Array<{
        key: string;
        value: string;
    }>;
    startedAfter?: string;
    startedBefore?: string;
}
export declare class ExecutionsService {
    static getWorkflowIdsForUser(user: User): Promise<string[]>;
    static getExecutionsList(req: ExecutionRequest.GetAll): Promise<IExecutionsListResponse>;
    static getExecution(req: ExecutionRequest.Get): Promise<IExecutionResponse | IExecutionFlattedResponse | undefined>;
    static retryExecution(req: ExecutionRequest.Retry): Promise<boolean>;
    static deleteExecutions(req: ExecutionRequest.Delete): Promise<void>;
}
