"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clean = exports.getAllUsersAndCount = exports.getUser = exports.getSelectableProperties = void 0;
const typedi_1 = require("typedi");
const repositories_1 = require("../../../../databases/repositories");
const pick_1 = __importDefault(require("lodash/pick"));
const uuid_1 = require("uuid");
const getSelectableProperties = (table) => {
    return {
        user: ['id', 'email', 'firstName', 'lastName', 'createdAt', 'updatedAt', 'isPending'],
        role: ['id', 'name', 'scope', 'createdAt', 'updatedAt'],
    }[table];
};
exports.getSelectableProperties = getSelectableProperties;
async function getUser(data) {
    return typedi_1.Container.get(repositories_1.UserRepository).findOne({
        where: {
            ...((0, uuid_1.validate)(data.withIdentifier) && { id: data.withIdentifier }),
            ...(!(0, uuid_1.validate)(data.withIdentifier) && { email: data.withIdentifier }),
        },
        relations: (data === null || data === void 0 ? void 0 : data.includeRole) ? ['globalRole'] : undefined,
    });
}
exports.getUser = getUser;
async function getAllUsersAndCount(data) {
    const users = await typedi_1.Container.get(repositories_1.UserRepository).find({
        where: {},
        relations: (data === null || data === void 0 ? void 0 : data.includeRole) ? ['globalRole'] : undefined,
        skip: data.offset,
        take: data.limit,
    });
    const count = await typedi_1.Container.get(repositories_1.UserRepository).count();
    return [users, count];
}
exports.getAllUsersAndCount = getAllUsersAndCount;
function pickUserSelectableProperties(user, options) {
    return (0, pick_1.default)(user, (0, exports.getSelectableProperties)('user').concat((options === null || options === void 0 ? void 0 : options.includeRole) ? ['globalRole'] : []));
}
function clean(users, options) {
    return Array.isArray(users)
        ? users.map((user) => pickUserSelectableProperties(user, options))
        : pickUserSelectableProperties(users, options);
}
exports.clean = clean;
//# sourceMappingURL=users.service.ee.js.map