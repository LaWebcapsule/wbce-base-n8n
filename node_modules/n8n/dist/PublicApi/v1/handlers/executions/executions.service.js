"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteExecution = exports.getExecutionInWorkflows = exports.getExecutionsCount = exports.getExecutions = void 0;
const typeorm_1 = require("typeorm");
const typedi_1 = require("typedi");
const Db = __importStar(require("../../../../Db"));
const repositories_1 = require("../../../../databases/repositories");
function getStatusCondition(status) {
    const condition = {};
    if (status === 'success') {
        condition.status = 'success';
    }
    else if (status === 'waiting') {
        condition.status = 'waiting';
    }
    else if (status === 'error') {
        condition.status = (0, typeorm_1.In)(['error', 'crashed', 'failed']);
    }
    return condition;
}
async function getExecutions(params) {
    var _a, _b;
    let where = {};
    if (params.lastId && ((_a = params.excludedExecutionsIds) === null || _a === void 0 ? void 0 : _a.length)) {
        where.id = (0, typeorm_1.Raw)((id) => `${id} < :lastId AND ${id} NOT IN (:...excludedExecutionsIds)`, {
            lastId: params.lastId,
            excludedExecutionsIds: params.excludedExecutionsIds,
        });
    }
    else if (params.lastId) {
        where.id = (0, typeorm_1.LessThan)(params.lastId);
    }
    else if ((_b = params.excludedExecutionsIds) === null || _b === void 0 ? void 0 : _b.length) {
        where.id = (0, typeorm_1.Not)((0, typeorm_1.In)(params.excludedExecutionsIds));
    }
    if (params.status) {
        where = { ...where, ...getStatusCondition(params.status) };
    }
    if (params.workflowIds) {
        where = { ...where, workflowId: (0, typeorm_1.In)(params.workflowIds) };
    }
    return typedi_1.Container.get(repositories_1.ExecutionRepository).findMultipleExecutions({
        select: [
            'id',
            'mode',
            'retryOf',
            'retrySuccessId',
            'startedAt',
            'stoppedAt',
            'workflowId',
            'waitTill',
            'finished',
        ],
        where,
        order: { id: 'DESC' },
        take: params.limit,
        relations: ['executionData'],
    }, {
        includeData: params.includeData,
        unflattenData: true,
    });
}
exports.getExecutions = getExecutions;
async function getExecutionsCount(data) {
    const executions = await Db.collections.Execution.count({
        where: {
            ...(data.lastId && { id: (0, typeorm_1.LessThan)(data.lastId) }),
            ...(data.status && { ...getStatusCondition(data.status) }),
            ...(data.workflowIds && { workflowId: (0, typeorm_1.In)(data.workflowIds) }),
            ...(data.excludedWorkflowIds && { workflowId: (0, typeorm_1.Not)((0, typeorm_1.In)(data.excludedWorkflowIds)) }),
        },
        take: data.limit,
    });
    return executions;
}
exports.getExecutionsCount = getExecutionsCount;
async function getExecutionInWorkflows(id, workflowIds, includeData) {
    return typedi_1.Container.get(repositories_1.ExecutionRepository).findSingleExecution(id, {
        where: {
            workflowId: (0, typeorm_1.In)(workflowIds),
        },
        includeData,
        unflattenData: true,
    });
}
exports.getExecutionInWorkflows = getExecutionInWorkflows;
async function deleteExecution(execution) {
    return typedi_1.Container.get(repositories_1.ExecutionRepository).deleteExecution(execution.id);
}
exports.deleteExecution = deleteExecution;
//# sourceMappingURL=executions.service.js.map