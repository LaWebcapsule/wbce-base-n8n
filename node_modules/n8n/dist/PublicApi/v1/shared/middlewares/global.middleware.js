"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validLicenseWithUserQuota = exports.validCursor = exports.authorize = void 0;
const typedi_1 = require("typedi");
const pagination_service_1 = require("../services/pagination.service");
const License_1 = require("../../../../License");
const UNLIMITED_USERS_QUOTA = -1;
const authorize = (authorizedRoles) => (req, res, next) => {
    const { name } = req.user.globalRole;
    if (!authorizedRoles.includes(name)) {
        return res.status(403).json({ message: 'Forbidden' });
    }
    return next();
};
exports.authorize = authorize;
const validCursor = (req, res, next) => {
    if (req.query.cursor) {
        const { cursor } = req.query;
        try {
            const paginationData = (0, pagination_service_1.decodeCursor)(cursor);
            if ('offset' in paginationData) {
                req.query.offset = paginationData.offset;
                req.query.limit = paginationData.limit;
            }
            else {
                req.query.lastId = paginationData.lastId;
                req.query.limit = paginationData.limit;
            }
        }
        catch (error) {
            return res.status(400).json({
                message: 'An invalid cursor was provided',
            });
        }
    }
    return next();
};
exports.validCursor = validCursor;
const validLicenseWithUserQuota = (req, res, next) => {
    const license = typedi_1.Container.get(License_1.License);
    if (license.getUsersLimit() !== UNLIMITED_USERS_QUOTA) {
        return res.status(403).json({
            message: '/users path can only be used with a valid license. See https://n8n.io/pricing/',
        });
    }
    return next();
};
exports.validLicenseWithUserQuota = validLicenseWithUserQuota;
//# sourceMappingURL=global.middleware.js.map