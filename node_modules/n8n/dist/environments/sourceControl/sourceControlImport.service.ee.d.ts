import type { ExportableCredential } from './types/exportableCredential';
import type { Variables } from '../../databases/entities/Variables';
import type { WorkflowTagMapping } from '../../databases/entities/WorkflowTagMapping';
import type { TagEntity } from '../../databases/entities/TagEntity';
import { ActiveWorkflowRunner } from '../../ActiveWorkflowRunner';
import type { SourceControlWorkflowVersionId } from './types/sourceControlWorkflowVersionId';
import type { SourceControlledFile } from './types/sourceControlledFile';
import { VariablesService } from '../variables/variables.service';
import { TagRepository } from '../../databases/repositories';
export declare class SourceControlImportService {
    private readonly variablesService;
    private readonly activeWorkflowRunner;
    private readonly tagRepository;
    private gitFolder;
    private workflowExportFolder;
    private credentialExportFolder;
    constructor(variablesService: VariablesService, activeWorkflowRunner: ActiveWorkflowRunner, tagRepository: TagRepository);
    private getOwnerGlobalRole;
    private getCredentialOwnerRole;
    private getWorkflowOwnerRole;
    private importCredentialsFromFiles;
    getRemoteVersionIdsFromFiles(): Promise<SourceControlWorkflowVersionId[]>;
    getLocalVersionIdsFromDb(): Promise<SourceControlWorkflowVersionId[]>;
    getRemoteCredentialsFromFiles(): Promise<Array<ExportableCredential & {
        filename: string;
    }>>;
    getLocalCredentialsFromDb(): Promise<Array<ExportableCredential & {
        filename: string;
    }>>;
    getRemoteVariablesFromFile(): Promise<Variables[]>;
    getLocalVariablesFromDb(): Promise<Variables[]>;
    getRemoteTagsAndMappingsFromFile(): Promise<{
        tags: TagEntity[];
        mappings: WorkflowTagMapping[];
    }>;
    getLocalTagsAndMappingsFromDb(): Promise<{
        tags: TagEntity[];
        mappings: WorkflowTagMapping[];
    }>;
    importWorkflowFromWorkFolder(candidates: SourceControlledFile[], userId: string): Promise<{
        id: string;
        name: string;
    }[]>;
    importCredentialsFromWorkFolder(candidates: SourceControlledFile[], userId: string): Promise<{
        id: string;
        name: string;
        type: string;
    }[]>;
    importTagsFromWorkFolder(candidate: SourceControlledFile): Promise<{
        tags: TagEntity[];
        mappings: WorkflowTagMapping[];
    } | undefined>;
    importVariablesFromWorkFolder(candidate: SourceControlledFile, valueOverrides?: {
        [key: string]: string;
    }): Promise<{
        imported: string[];
    } | undefined>;
}
