"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceControlPreferencesService = void 0;
const typedi_1 = require("typedi");
const sourceControlPreferences_1 = require("./types/sourceControlPreferences");
const class_validator_1 = require("class-validator");
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const sourceControlHelper_ee_1 = require("./sourceControlHelper.ee");
const n8n_core_1 = require("n8n-core");
const n8n_workflow_1 = require("n8n-workflow");
const Db = __importStar(require("../../Db"));
const constants_1 = require("./constants");
const path_1 = __importDefault(require("path"));
let SourceControlPreferencesService = exports.SourceControlPreferencesService = class SourceControlPreferencesService {
    constructor() {
        this._sourceControlPreferences = new sourceControlPreferences_1.SourceControlPreferences();
        const userFolder = n8n_core_1.UserSettings.getUserN8nFolderPath();
        this.sshFolder = path_1.default.join(userFolder, constants_1.SOURCE_CONTROL_SSH_FOLDER);
        this.gitFolder = path_1.default.join(userFolder, constants_1.SOURCE_CONTROL_GIT_FOLDER);
        this.sshKeyName = path_1.default.join(this.sshFolder, constants_1.SOURCE_CONTROL_SSH_KEY_NAME);
    }
    get sourceControlPreferences() {
        var _a;
        return {
            ...this._sourceControlPreferences,
            connected: (_a = this._sourceControlPreferences.connected) !== null && _a !== void 0 ? _a : false,
            publicKey: this.getPublicKey(),
        };
    }
    set sourceControlPreferences(preferences) {
        this._sourceControlPreferences = sourceControlPreferences_1.SourceControlPreferences.merge(preferences, this._sourceControlPreferences);
    }
    isSourceControlSetup() {
        return (this.isSourceControlLicensedAndEnabled() &&
            this.getPreferences().repositoryUrl &&
            this.getPreferences().branchName);
    }
    getPublicKey() {
        try {
            return (0, fs_1.readFileSync)(this.sshKeyName + '.pub', { encoding: 'utf8' });
        }
        catch (error) {
            n8n_workflow_1.LoggerProxy.error(`Failed to read public key: ${error.message}`);
        }
        return '';
    }
    hasKeyPairFiles() {
        return (0, fs_1.existsSync)(this.sshKeyName) && (0, fs_1.existsSync)(this.sshKeyName + '.pub');
    }
    async deleteKeyPairFiles() {
        try {
            await (0, promises_1.rm)(this.sshFolder, { recursive: true });
        }
        catch (error) {
            n8n_workflow_1.LoggerProxy.error(`Failed to delete ssh folder: ${error.message}`);
        }
    }
    async generateAndSaveKeyPair() {
        (0, sourceControlHelper_ee_1.sourceControlFoldersExistCheck)([this.gitFolder, this.sshFolder]);
        const keyPair = await (0, sourceControlHelper_ee_1.generateSshKeyPair)('ed25519');
        if (keyPair.publicKey && keyPair.privateKey) {
            try {
                await (0, promises_1.writeFile)(this.sshKeyName + '.pub', keyPair.publicKey, {
                    encoding: 'utf8',
                    mode: 0o666,
                });
                await (0, promises_1.writeFile)(this.sshKeyName, keyPair.privateKey, { encoding: 'utf8', mode: 0o600 });
            }
            catch (error) {
                throw Error(`Failed to save key pair: ${error.message}`);
            }
        }
        return this.getPreferences();
    }
    isBranchReadOnly() {
        return this._sourceControlPreferences.branchReadOnly;
    }
    isSourceControlConnected() {
        return this.sourceControlPreferences.connected;
    }
    isSourceControlLicensedAndEnabled() {
        return this.isSourceControlConnected() && (0, sourceControlHelper_ee_1.isSourceControlLicensed)();
    }
    getBranchName() {
        return this.sourceControlPreferences.branchName;
    }
    getPreferences() {
        return this.sourceControlPreferences;
    }
    async validateSourceControlPreferences(preferences, allowMissingProperties = true) {
        const preferencesObject = new sourceControlPreferences_1.SourceControlPreferences(preferences);
        const validationResult = await (0, class_validator_1.validate)(preferencesObject, {
            forbidUnknownValues: false,
            skipMissingProperties: allowMissingProperties,
            stopAtFirstError: false,
            validationError: { target: false },
        });
        if (validationResult.length > 0) {
            throw new Error(`Invalid source control preferences: ${JSON.stringify(validationResult)}`);
        }
        return validationResult;
    }
    async setPreferences(preferences, saveToDb = true) {
        (0, sourceControlHelper_ee_1.sourceControlFoldersExistCheck)([this.gitFolder, this.sshFolder]);
        if (!this.hasKeyPairFiles()) {
            n8n_workflow_1.LoggerProxy.debug('No key pair files found, generating new pair');
            await this.generateAndSaveKeyPair();
        }
        this.sourceControlPreferences = preferences;
        if (saveToDb) {
            const settingsValue = JSON.stringify(this._sourceControlPreferences);
            try {
                await Db.collections.Settings.save({
                    key: constants_1.SOURCE_CONTROL_PREFERENCES_DB_KEY,
                    value: settingsValue,
                    loadOnStartup: true,
                });
            }
            catch (error) {
                throw new Error(`Failed to save source control preferences: ${error.message}`);
            }
        }
        return this.sourceControlPreferences;
    }
    async loadFromDbAndApplySourceControlPreferences() {
        const loadedPreferences = await Db.collections.Settings.findOne({
            where: { key: constants_1.SOURCE_CONTROL_PREFERENCES_DB_KEY },
        });
        if (loadedPreferences) {
            try {
                const preferences = (0, n8n_workflow_1.jsonParse)(loadedPreferences.value);
                if (preferences) {
                    await this.setPreferences(preferences, false);
                    return preferences;
                }
            }
            catch (error) {
                n8n_workflow_1.LoggerProxy.warn(`Could not parse Source Control settings from database: ${error.message}`);
            }
        }
        await this.setPreferences(new sourceControlPreferences_1.SourceControlPreferences(), true);
        return this.sourceControlPreferences;
    }
};
exports.SourceControlPreferencesService = SourceControlPreferencesService = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [])
], SourceControlPreferencesService);
//# sourceMappingURL=sourceControlPreferences.service.ee.js.map