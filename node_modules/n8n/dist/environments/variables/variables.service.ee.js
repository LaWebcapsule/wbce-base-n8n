"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EEVariablesService = exports.VariablesValidationError = exports.VariablesLicenseError = void 0;
const typedi_1 = require("typedi");
const InternalHooks_1 = require("../../InternalHooks");
const generators_1 = require("../../databases/utils/generators");
const enviromentHelpers_1 = require("./enviromentHelpers");
const variables_service_1 = require("./variables.service");
class VariablesLicenseError extends Error {
}
exports.VariablesLicenseError = VariablesLicenseError;
class VariablesValidationError extends Error {
}
exports.VariablesValidationError = VariablesValidationError;
let EEVariablesService = exports.EEVariablesService = class EEVariablesService extends variables_service_1.VariablesService {
    validateVariable(variable) {
        var _a;
        if (variable.key.length > 50) {
            throw new VariablesValidationError('key cannot be longer than 50 characters');
        }
        if (variable.key.replace(/[A-Za-z0-9_]/g, '').length !== 0) {
            throw new VariablesValidationError('key can only contain characters A-Za-z0-9_');
        }
        if (((_a = variable.value) === null || _a === void 0 ? void 0 : _a.length) > 255) {
            throw new VariablesValidationError('value cannot be longer than 255 characters');
        }
    }
    async create(variable) {
        if (!(0, enviromentHelpers_1.canCreateNewVariable)(await this.getCount())) {
            throw new VariablesLicenseError('Variables limit reached');
        }
        this.validateVariable(variable);
        void typedi_1.Container.get(InternalHooks_1.InternalHooks).onVariableCreated({ variable_type: variable.type });
        const saveResult = await this.variablesRepository.save({
            ...variable,
            id: (0, generators_1.generateNanoId)(),
        });
        await this.updateCache();
        return saveResult;
    }
    async update(id, variable) {
        this.validateVariable(variable);
        await this.variablesRepository.update(id, variable);
        await this.updateCache();
        return (await this.getCached(id));
    }
};
exports.EEVariablesService = EEVariablesService = __decorate([
    (0, typedi_1.Service)()
], EEVariablesService);
//# sourceMappingURL=variables.service.ee.js.map