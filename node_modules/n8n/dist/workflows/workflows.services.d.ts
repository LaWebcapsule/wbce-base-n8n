import type { INode, IPinData } from 'n8n-workflow';
import type { FindOptionsWhere, UpdateResult } from 'typeorm';
import type { SharedWorkflow } from '../databases/entities/SharedWorkflow';
import type { User } from '../databases/entities/User';
import type { WorkflowEntity } from '../databases/entities/WorkflowEntity';
import { type WorkflowRequest, type ListQuery } from '../requests';
import type { IWorkflowDb } from '../Interfaces';
export declare class WorkflowsService {
    static getSharing(user: User, workflowId: string, relations?: string[], { allowGlobalOwner }?: {
        allowGlobalOwner: boolean;
    }): Promise<SharedWorkflow | null>;
    static findPinnedTrigger(workflow: IWorkflowDb, startNodes?: string[], pinData?: IPinData): INode | null;
    static get(workflow: FindOptionsWhere<WorkflowEntity>, options?: {
        relations: string[];
    }): Promise<WorkflowEntity | null>;
    static getMany(sharedWorkflowIds: string[], options?: ListQuery.Options): Promise<{
        workflows: (Pick<WorkflowEntity, "id"> & Partial<Pick<WorkflowEntity, "name" | "createdAt" | "updatedAt" | "active" | "tags" | "versionId">>)[];
        count: number;
    }>;
    static update(user: User, workflow: WorkflowEntity, workflowId: string, tagIds?: string[], forceSave?: boolean, roles?: string[]): Promise<WorkflowEntity>;
    static runManually({ workflowData, runData, pinData, startNodes, destinationNode, }: WorkflowRequest.ManualRunPayload, user: User, sessionId?: string): Promise<{
        waitingForWebhook: boolean;
        executionId?: undefined;
    } | {
        executionId: string;
        waitingForWebhook?: undefined;
    }>;
    static delete(user: User, workflowId: string): Promise<WorkflowEntity | undefined>;
    static updateWorkflowTriggerCount(id: string, triggerCount: number): Promise<UpdateResult>;
}
