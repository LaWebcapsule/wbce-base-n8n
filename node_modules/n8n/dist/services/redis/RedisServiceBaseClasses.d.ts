import type Redis from 'ioredis';
import type { Cluster } from 'ioredis';
export type RedisClientType = 'subscriber' | 'client' | 'bclient' | 'subscriber(bull)' | 'client(bull)' | 'bclient(bull)' | 'client(cache)' | 'publisher' | 'consumer' | 'producer' | 'list-sender' | 'list-receiver';
export type RedisServiceMessageHandler = ((channel: string, message: string) => void) | ((stream: string, id: string, message: string[]) => void);
declare class RedisServiceBase {
    redisClient: Redis | Cluster | undefined;
    isInitialized: boolean;
    init(type?: RedisClientType): Promise<void>;
    destroy(): Promise<void>;
}
export declare abstract class RedisServiceBaseSender extends RedisServiceBase {
    senderId: string;
    setSenderId(senderId?: string): void;
}
export declare abstract class RedisServiceBaseReceiver extends RedisServiceBase {
    messageHandlers: Map<string, RedisServiceMessageHandler>;
    addMessageHandler(handlerName: string, handler: RedisServiceMessageHandler): void;
    removeMessageHandler(handlerName: string): void;
}
export {};
