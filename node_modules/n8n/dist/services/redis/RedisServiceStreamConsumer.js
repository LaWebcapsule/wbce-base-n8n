"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisServiceStreamConsumer = void 0;
const typedi_1 = require("typedi");
const n8n_workflow_1 = require("n8n-workflow");
const RedisServiceBaseClasses_1 = require("./RedisServiceBaseClasses");
let RedisServiceStreamConsumer = exports.RedisServiceStreamConsumer = class RedisServiceStreamConsumer extends RedisServiceBaseClasses_1.RedisServiceBaseReceiver {
    constructor() {
        super(...arguments);
        this.streams = new Map();
    }
    async init() {
        await super.init('consumer');
    }
    async listenToStream(stream, lastId = '$') {
        var _a, _b;
        if (!this.redisClient) {
            await this.init();
        }
        n8n_workflow_1.LoggerProxy.debug(`Redis client now listening to stream ${stream} starting with id ${lastId}`);
        this.setLastId(stream, lastId);
        const interval = (_b = (_a = this.streams.get(stream)) === null || _a === void 0 ? void 0 : _a.pollingInterval) !== null && _b !== void 0 ? _b : 1000;
        const waiter = setInterval(async () => {
            var _a, _b, _c;
            const currentLastId = (_b = (_a = this.streams.get(stream)) === null || _a === void 0 ? void 0 : _a.lastId) !== null && _b !== void 0 ? _b : '$';
            const results = await ((_c = this.redisClient) === null || _c === void 0 ? void 0 : _c.xread('BLOCK', interval, 'STREAMS', stream, currentLastId));
            if (results && results.length > 0) {
                const [_key, messages] = results[0];
                if (messages.length > 0) {
                    messages.forEach(([id, message]) => {
                        this.messageHandlers.forEach((handler) => handler(stream, id, message));
                    });
                    const newLastId = messages[messages.length - 1][0];
                    this.setLastId(stream, newLastId);
                }
            }
        }, interval);
        this.setWaiter(stream, waiter);
    }
    stopListeningToStream(stream) {
        n8n_workflow_1.LoggerProxy.debug(`Redis client stopped listening to stream ${stream}`);
        const existing = this.streams.get(stream);
        if (existing === null || existing === void 0 ? void 0 : existing.waiter) {
            clearInterval(existing.waiter);
        }
        this.streams.delete(stream);
    }
    updateStreamDetails(stream, details) {
        var _a, _b, _c, _d, _e;
        const existing = this.streams.get(stream);
        this.streams.set(stream, {
            lastId: (_b = (_a = details.lastId) !== null && _a !== void 0 ? _a : existing === null || existing === void 0 ? void 0 : existing.lastId) !== null && _b !== void 0 ? _b : '$',
            waiter: (_c = details.waiter) !== null && _c !== void 0 ? _c : existing === null || existing === void 0 ? void 0 : existing.waiter,
            pollingInterval: (_e = (_d = details.pollingInterval) !== null && _d !== void 0 ? _d : existing === null || existing === void 0 ? void 0 : existing.pollingInterval) !== null && _e !== void 0 ? _e : 1000,
        });
    }
    async setPollingInterval(stream, pollingInterval) {
        var _a;
        this.updateStreamDetails(stream, { pollingInterval });
        if ((_a = this.streams.get(stream)) === null || _a === void 0 ? void 0 : _a.waiter) {
            this.stopListeningToStream(stream);
            await this.listenToStream(stream);
        }
    }
    setLastId(stream, lastId) {
        this.updateStreamDetails(stream, { lastId });
    }
    setWaiter(stream, waiter) {
        if (this.streams.get(stream)) {
            this.updateStreamDetails(stream, { waiter });
        }
    }
};
exports.RedisServiceStreamConsumer = RedisServiceStreamConsumer = __decorate([
    (0, typedi_1.Service)()
], RedisServiceStreamConsumer);
//# sourceMappingURL=RedisServiceStreamConsumer.js.map