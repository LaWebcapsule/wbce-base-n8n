"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisServiceListReceiver = void 0;
const typedi_1 = require("typedi");
const RedisServiceHelper_1 = require("./RedisServiceHelper");
const RedisServiceBaseClasses_1 = require("./RedisServiceBaseClasses");
const n8n_workflow_1 = require("n8n-workflow");
let RedisServiceListReceiver = exports.RedisServiceListReceiver = class RedisServiceListReceiver extends RedisServiceBaseClasses_1.RedisServiceBaseReceiver {
    async init() {
        await super.init('list-receiver');
    }
    async popFromHead(list) {
        var _a;
        if (!this.redisClient) {
            await this.init();
        }
        return (_a = this.redisClient) === null || _a === void 0 ? void 0 : _a.lpop(list);
    }
    async popFromTail(list) {
        var _a;
        if (!this.redisClient) {
            await this.init();
        }
        return (_a = this.redisClient) === null || _a === void 0 ? void 0 : _a.rpop(list);
    }
    poppedResultToWorkerResponse(poppedResult, list = RedisServiceHelper_1.WORKER_RESPONSE_REDIS_LIST) {
        if (poppedResult) {
            try {
                const workerResponse = (0, n8n_workflow_1.jsonParse)(poppedResult);
                if (workerResponse) {
                    console.log('Received worker response', workerResponse);
                }
                return workerResponse;
            }
            catch (error) {
                n8n_workflow_1.LoggerProxy.warn(`Error parsing worker response on list ${list}: ${error.message}`);
            }
        }
        return null;
    }
    async popOldestWorkerResponse() {
        const poppedResult = await this.popFromTail(RedisServiceHelper_1.WORKER_RESPONSE_REDIS_LIST);
        return this.poppedResultToWorkerResponse(poppedResult);
    }
    async popLatestWorkerResponse() {
        const poppedResult = await this.popFromHead(RedisServiceHelper_1.WORKER_RESPONSE_REDIS_LIST);
        return this.poppedResultToWorkerResponse(poppedResult);
    }
};
exports.RedisServiceListReceiver = RedisServiceListReceiver = __decorate([
    (0, typedi_1.Service)()
], RedisServiceListReceiver);
//# sourceMappingURL=RedisServiceListReceiver.js.map