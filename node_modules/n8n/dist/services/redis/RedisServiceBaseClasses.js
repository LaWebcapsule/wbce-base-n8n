"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisServiceBaseReceiver = exports.RedisServiceBaseSender = void 0;
const RedisServiceHelper_1 = require("./RedisServiceHelper");
const n8n_workflow_1 = require("n8n-workflow");
class RedisServiceBase {
    constructor() {
        this.isInitialized = false;
    }
    async init(type = 'client') {
        if (this.redisClient && this.isInitialized) {
            return;
        }
        this.redisClient = await (0, RedisServiceHelper_1.getDefaultRedisClient)(undefined, type);
        this.redisClient.on('close', () => {
            n8n_workflow_1.LoggerProxy.warn('Redis unavailable - trying to reconnect...');
        });
        this.redisClient.on('error', (error) => {
            if (!String(error).includes('ECONNREFUSED')) {
                n8n_workflow_1.LoggerProxy.warn('Error with Redis: ', error);
            }
        });
    }
    async destroy() {
        if (!this.redisClient) {
            return;
        }
        await this.redisClient.quit();
        this.redisClient = undefined;
    }
}
class RedisServiceBaseSender extends RedisServiceBase {
    setSenderId(senderId) {
        this.senderId = senderId !== null && senderId !== void 0 ? senderId : '';
    }
}
exports.RedisServiceBaseSender = RedisServiceBaseSender;
class RedisServiceBaseReceiver extends RedisServiceBase {
    constructor() {
        super(...arguments);
        this.messageHandlers = new Map();
    }
    addMessageHandler(handlerName, handler) {
        this.messageHandlers.set(handlerName, handler);
    }
    removeMessageHandler(handlerName) {
        this.messageHandlers.delete(handlerName);
    }
}
exports.RedisServiceBaseReceiver = RedisServiceBaseReceiver;
//# sourceMappingURL=RedisServiceBaseClasses.js.map