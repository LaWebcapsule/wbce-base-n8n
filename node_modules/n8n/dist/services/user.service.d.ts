import type { EntityManager, FindManyOptions, FindOneOptions, FindOptionsWhere } from 'typeorm';
import { User } from '../databases/entities/User';
import type { IUserSettings } from 'n8n-workflow';
import { UserRepository } from '../databases/repositories';
export declare class UserService {
    private readonly userRepository;
    constructor(userRepository: UserRepository);
    findOne(options: FindOneOptions<User>): Promise<User | null>;
    findOneOrFail(options: FindOneOptions<User>): Promise<User>;
    findMany(options: FindManyOptions<User>): Promise<User[]>;
    findOneBy(options: FindOptionsWhere<User>): Promise<User | null>;
    create(data: Partial<User>): User;
    save(user: Partial<User>): Promise<Partial<User> & User>;
    update(userId: string, data: Partial<User>): Promise<import("typeorm").UpdateResult>;
    getByIds(transaction: EntityManager, ids: string[]): Promise<User[]>;
    getManager(): EntityManager;
    updateSettings(userId: string, newSettings: Partial<IUserSettings>): Promise<import("typeorm").UpdateResult>;
    generatePasswordResetUrl(instanceBaseUrl: string, token: string): string;
}
