/// <reference types="node" />
import { EventEmitter } from 'events';
import type { INode, IRun, IWorkflowBase } from 'n8n-workflow';
import { WorkflowStatisticsRepository } from '../databases/repositories';
import { OwnershipService } from './ownership.service';
export declare class EventsService extends EventEmitter {
    private repository;
    private ownershipService;
    constructor(repository: WorkflowStatisticsRepository, ownershipService: OwnershipService);
    workflowExecutionCompleted(workflowData: IWorkflowBase, runData: IRun): Promise<void>;
    nodeFetchedData(workflowId: string | undefined | null, node: INode): Promise<void>;
}
export declare interface EventsService {
    on(event: 'nodeFetchedData', listener: (workflowId: string | undefined | null, node: INode) => void): this;
    on(event: 'workflowExecutionCompleted', listener: (workflowData: IWorkflowBase, runData: IRun) => void): this;
    on(event: 'telemetry.onFirstProductionWorkflowSuccess', listener: (metrics: {
        user_id: string;
        workflow_id: string;
    }) => void): this;
    on(event: 'telemetry.onFirstWorkflowDataLoad', listener: (metrics: {
        user_id: string;
        workflow_id: string;
        node_type: string;
        node_id: string;
        credential_type?: string;
        credential_id?: string;
    }) => void): this;
}
