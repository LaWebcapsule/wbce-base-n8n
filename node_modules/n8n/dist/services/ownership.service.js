"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OwnershipService = void 0;
const typedi_1 = require("typedi");
const cache_service_1 = require("./cache.service");
const repositories_1 = require("../databases/repositories");
const role_service_1 = require("./role.service");
const user_service_1 = require("./user.service");
let OwnershipService = exports.OwnershipService = class OwnershipService {
    constructor(cacheService, userService, roleService, sharedWorkflowRepository) {
        this.cacheService = cacheService;
        this.userService = userService;
        this.roleService = roleService;
        this.sharedWorkflowRepository = sharedWorkflowRepository;
    }
    async getWorkflowOwnerCached(workflowId) {
        const cachedValue = (await this.cacheService.get(`cache:workflow-owner:${workflowId}`));
        if (cachedValue)
            return this.userService.create(cachedValue);
        const workflowOwnerRole = await this.roleService.findWorkflowOwnerRole();
        if (!workflowOwnerRole)
            throw new Error('Failed to find workflow owner role');
        const sharedWorkflow = await this.sharedWorkflowRepository.findOneOrFail({
            where: { workflowId, roleId: workflowOwnerRole.id },
            relations: ['user', 'user.globalRole'],
        });
        void this.cacheService.set(`cache:workflow-owner:${workflowId}`, sharedWorkflow.user);
        return sharedWorkflow.user;
    }
    addOwnedBy(workflow, workflowOwnerRole) {
        var _a;
        const { shared, ...rest } = workflow;
        const ownerId = (_a = shared === null || shared === void 0 ? void 0 : shared.find((s) => s.roleId.toString() === workflowOwnerRole.id)) === null || _a === void 0 ? void 0 : _a.userId;
        return Object.assign(rest, {
            ownedBy: ownerId ? { id: ownerId } : null,
        });
    }
};
exports.OwnershipService = OwnershipService = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [cache_service_1.CacheService,
        user_service_1.UserService,
        role_service_1.RoleService,
        repositories_1.SharedWorkflowRepository])
], OwnershipService);
//# sourceMappingURL=ownership.service.js.map