"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheService = void 0;
const typedi_1 = require("typedi");
const config_1 = __importDefault(require("../config"));
const cache_manager_1 = require("cache-manager");
const n8n_workflow_1 = require("n8n-workflow");
const RedisServiceHelper_1 = require("./redis/RedisServiceHelper");
const events_1 = __importDefault(require("events"));
let CacheService = exports.CacheService = class CacheService extends events_1.default {
    constructor() {
        super(...arguments);
        this.metricsCounterEvents = {
            cacheHit: 'metrics.cache.hit',
            cacheMiss: 'metrics.cache.miss',
            cacheUpdate: 'metrics.cache.update',
        };
    }
    isRedisCache() {
        var _a, _b;
        return ((_b = (_a = this.cache) === null || _a === void 0 ? void 0 : _a.store) === null || _b === void 0 ? void 0 : _b.isCacheable) !== undefined;
    }
    async init() {
        if (!config_1.default.getEnv('cache.enabled')) {
            return;
        }
        const backend = config_1.default.getEnv('cache.backend');
        if (backend === 'redis' ||
            (backend === 'auto' && config_1.default.getEnv('executions.mode') === 'queue')) {
            const { redisInsStore } = await Promise.resolve().then(() => __importStar(require('cache-manager-ioredis-yet')));
            const redisPrefix = (0, RedisServiceHelper_1.getRedisPrefix)(config_1.default.getEnv('redis.prefix'));
            const cachePrefix = config_1.default.getEnv('cache.redis.prefix');
            const keyPrefix = `${redisPrefix}:${cachePrefix}:`;
            const redisClient = await (0, RedisServiceHelper_1.getDefaultRedisClient)({ keyPrefix }, 'client(cache)');
            const redisStore = redisInsStore(redisClient, {
                ttl: config_1.default.getEnv('cache.redis.ttl'),
            });
            this.cache = await (0, cache_manager_1.caching)(redisStore);
        }
        else {
            const textEncoder = new TextEncoder();
            this.cache = await (0, cache_manager_1.caching)('memory', {
                ttl: config_1.default.getEnv('cache.memory.ttl'),
                maxSize: config_1.default.getEnv('cache.memory.maxSize'),
                sizeCalculation: (item) => {
                    return textEncoder.encode((0, n8n_workflow_1.jsonStringify)(item, { replaceCircularRefs: true })).length;
                },
            });
        }
    }
    async get(key, options = {}) {
        var _a, _b;
        if (!key || key.length === 0) {
            return;
        }
        const value = await ((_a = this.cache) === null || _a === void 0 ? void 0 : _a.store.get(key));
        if (value !== undefined) {
            this.emit(this.metricsCounterEvents.cacheHit);
            return value;
        }
        this.emit(this.metricsCounterEvents.cacheMiss);
        if (options.refreshFunction) {
            this.emit(this.metricsCounterEvents.cacheUpdate);
            const refreshValue = await options.refreshFunction(key);
            await this.set(key, refreshValue, options.refreshTtl);
            return refreshValue;
        }
        return (_b = options.fallbackValue) !== null && _b !== void 0 ? _b : undefined;
    }
    async getMany(keys, options = {}) {
        var _a, _b;
        if (keys.length === 0) {
            return [];
        }
        let values = await ((_a = this.cache) === null || _a === void 0 ? void 0 : _a.store.mget(...keys));
        if (values === undefined) {
            values = keys.map(() => undefined);
        }
        if (!values.includes(undefined)) {
            this.emit(this.metricsCounterEvents.cacheHit);
            return values;
        }
        this.emit(this.metricsCounterEvents.cacheMiss);
        if (options.refreshFunctionEach) {
            for (let i = 0; i < keys.length; i++) {
                if (values[i] === undefined) {
                    const key = keys[i];
                    let fallback = undefined;
                    if (options.fallbackValues && options.fallbackValues.length > i) {
                        fallback = options.fallbackValues[i];
                    }
                    const refreshValue = await this.get(key, {
                        refreshFunction: options.refreshFunctionEach,
                        refreshTtl: options.refreshTtl,
                        fallbackValue: fallback,
                    });
                    values[i] = refreshValue;
                }
            }
            return values;
        }
        if (options.refreshFunctionMany) {
            this.emit(this.metricsCounterEvents.cacheUpdate);
            const refreshValues = await options.refreshFunctionMany(keys);
            if (keys.length !== refreshValues.length) {
                throw new Error('refreshFunctionMany must return the same number of values as keys');
            }
            const newKV = [];
            for (let i = 0; i < keys.length; i++) {
                newKV.push([keys[i], refreshValues[i]]);
            }
            await this.setMany(newKV, options.refreshTtl);
            return refreshValues;
        }
        return (_b = options.fallbackValues) !== null && _b !== void 0 ? _b : values;
    }
    async set(key, value, ttl) {
        var _a, _b, _c;
        if (!this.cache) {
            await this.init();
        }
        if (!key || key.length === 0) {
            return;
        }
        if (value === undefined || value === null) {
            return;
        }
        if (this.isRedisCache()) {
            if (!((_b = (_a = this.cache) === null || _a === void 0 ? void 0 : _a.store) === null || _b === void 0 ? void 0 : _b.isCacheable(value))) {
                throw new Error('Value is not cacheable');
            }
        }
        await ((_c = this.cache) === null || _c === void 0 ? void 0 : _c.store.set(key, value, ttl));
    }
    async setMany(values, ttl) {
        var _a;
        if (!this.cache) {
            await this.init();
        }
        if (values.length === 0) {
            return;
        }
        const nonNullValues = values.filter(([key, value]) => value !== undefined && value !== null && key && key.length > 0);
        if (this.isRedisCache()) {
            nonNullValues.forEach(([_key, value]) => {
                var _a, _b;
                if (!((_b = (_a = this.cache) === null || _a === void 0 ? void 0 : _a.store) === null || _b === void 0 ? void 0 : _b.isCacheable(value))) {
                    throw new Error('Value is not cacheable');
                }
            });
        }
        await ((_a = this.cache) === null || _a === void 0 ? void 0 : _a.store.mset(nonNullValues, ttl));
    }
    async delete(key) {
        var _a;
        if (!key || key.length === 0) {
            return;
        }
        await ((_a = this.cache) === null || _a === void 0 ? void 0 : _a.store.del(key));
    }
    async deleteMany(keys) {
        var _a;
        if (keys.length === 0) {
            return;
        }
        return (_a = this.cache) === null || _a === void 0 ? void 0 : _a.store.mdel(...keys);
    }
    async destroy() {
        if (this.cache) {
            await this.reset();
            this.cache = undefined;
        }
    }
    async enable() {
        config_1.default.set('cache.enabled', true);
        await this.init();
    }
    async disable() {
        config_1.default.set('cache.enabled', false);
        await this.destroy();
    }
    async getCache() {
        if (!this.cache) {
            await this.init();
        }
        return this.cache;
    }
    async reset() {
        var _a;
        await ((_a = this.cache) === null || _a === void 0 ? void 0 : _a.store.reset());
    }
    async keys() {
        var _a, _b;
        return (_b = (_a = this.cache) === null || _a === void 0 ? void 0 : _a.store.keys()) !== null && _b !== void 0 ? _b : [];
    }
    async keyValues() {
        const keys = await this.keys();
        const values = await this.getMany(keys);
        const map = new Map();
        if (keys.length === values.length) {
            for (let i = 0; i < keys.length; i++) {
                map.set(keys[i], values[i]);
            }
            return map;
        }
        throw new Error('Keys and values do not match, this should not happen and appears to result from some cache corruption.');
    }
};
exports.CacheService = CacheService = __decorate([
    (0, typedi_1.Service)()
], CacheService);
//# sourceMappingURL=cache.service.js.map