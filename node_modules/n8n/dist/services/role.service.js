"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleService = void 0;
const repositories_1 = require("../databases/repositories");
const typedi_1 = require("typedi");
const cache_service_1 = require("./cache.service");
class InvalidRoleError extends Error {
}
let RoleService = exports.RoleService = class RoleService {
    constructor(roleRepository, sharedWorkflowRepository, cacheService) {
        this.roleRepository = roleRepository;
        this.sharedWorkflowRepository = sharedWorkflowRepository;
        this.cacheService = cacheService;
        this.roles = [
            { scope: 'global', name: 'owner' },
            { scope: 'global', name: 'member' },
            { scope: 'workflow', name: 'owner' },
            { scope: 'credential', name: 'owner' },
            { scope: 'credential', name: 'user' },
            { scope: 'workflow', name: 'editor' },
        ];
        void this.populateCache();
    }
    async populateCache() {
        const allRoles = await this.roleRepository.find({});
        if (!allRoles)
            return;
        void this.cacheService.setMany(allRoles.map((r) => [r.cacheKey, r]));
    }
    async findCached(scope, name) {
        const cacheKey = `role:${scope}:${name}`;
        const cachedRole = await this.cacheService.get(cacheKey);
        if (cachedRole)
            return this.roleRepository.create(cachedRole);
        let dbRole = await this.roleRepository.findRole(scope, name);
        if (dbRole === null) {
            if (!this.isValid(scope, name)) {
                throw new InvalidRoleError(`${scope}:${name} is not a valid role`);
            }
            const toSave = this.roleRepository.create({ scope, name });
            dbRole = await this.roleRepository.save(toSave);
        }
        void this.cacheService.set(cacheKey, dbRole);
        return dbRole;
    }
    isValid(scope, name) {
        return this.roles.some((r) => r.scope === scope && r.name === name);
    }
    async findGlobalOwnerRole() {
        return this.findCached('global', 'owner');
    }
    async findGlobalMemberRole() {
        return this.findCached('global', 'member');
    }
    async findWorkflowOwnerRole() {
        return this.findCached('workflow', 'owner');
    }
    async findWorkflowEditorRole() {
        return this.findCached('workflow', 'editor');
    }
    async findCredentialOwnerRole() {
        return this.findCached('credential', 'owner');
    }
    async findCredentialUserRole() {
        return this.findCached('credential', 'user');
    }
    async findRoleByUserAndWorkflow(userId, workflowId) {
        return this.sharedWorkflowRepository
            .findOne({
            where: { workflowId, userId },
            relations: ['role'],
        })
            .then((shared) => shared === null || shared === void 0 ? void 0 : shared.role);
    }
};
exports.RoleService = RoleService = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [repositories_1.RoleRepository,
        repositories_1.SharedWorkflowRepository,
        cache_service_1.CacheService])
], RoleService);
//# sourceMappingURL=role.service.js.map