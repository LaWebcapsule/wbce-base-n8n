/// <reference types="node" />
import type { MemoryCache } from 'cache-manager';
import type { RedisCache } from 'cache-manager-ioredis-yet';
import EventEmitter from 'events';
export declare class CacheService extends EventEmitter {
    private cache;
    metricsCounterEvents: {
        cacheHit: string;
        cacheMiss: string;
        cacheUpdate: string;
    };
    isRedisCache(): boolean;
    init(): Promise<void>;
    get(key: string, options?: {
        fallbackValue?: unknown;
        refreshFunction?: (key: string) => Promise<unknown>;
        refreshTtl?: number;
    }): Promise<unknown>;
    getMany(keys: string[], options?: {
        fallbackValues?: unknown[];
        refreshFunctionEach?: (key: string) => Promise<unknown>;
        refreshFunctionMany?: (keys: string[]) => Promise<unknown[]>;
        refreshTtl?: number;
    }): Promise<unknown[]>;
    set(key: string, value: unknown, ttl?: number): Promise<void>;
    setMany(values: Array<[string, unknown]>, ttl?: number): Promise<void>;
    delete(key: string): Promise<void>;
    deleteMany(keys: string[]): Promise<void>;
    destroy(): Promise<void>;
    enable(): Promise<void>;
    disable(): Promise<void>;
    getCache(): Promise<RedisCache | MemoryCache | undefined>;
    reset(): Promise<void>;
    keys(): Promise<string[]>;
    keyValues(): Promise<Map<string, unknown>>;
}
