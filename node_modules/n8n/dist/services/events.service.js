"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsService = void 0;
const events_1 = require("events");
const typedi_1 = __importStar(require("typedi"));
const n8n_workflow_1 = require("n8n-workflow");
const repositories_1 = require("../databases/repositories");
const user_service_1 = require("../services/user.service");
const ownership_service_1 = require("./ownership.service");
let EventsService = exports.EventsService = class EventsService extends events_1.EventEmitter {
    constructor(repository, ownershipService) {
        super({ captureRejections: true });
        this.repository = repository;
        this.ownershipService = ownershipService;
        if ('SKIP_STATISTICS_EVENTS' in process.env)
            return;
        this.on('nodeFetchedData', async (workflowId, node) => this.nodeFetchedData(workflowId, node));
        this.on('workflowExecutionCompleted', async (workflowData, runData) => this.workflowExecutionCompleted(workflowData, runData));
    }
    async workflowExecutionCompleted(workflowData, runData) {
        var _a;
        const finished = runData.finished ? runData.finished : false;
        const manual = runData.mode === 'manual';
        let name;
        if (finished) {
            if (manual)
                name = "manual_success";
            else
                name = "production_success";
        }
        else {
            if (manual)
                name = "manual_error";
            else
                name = "production_error";
        }
        const workflowId = workflowData.id;
        if (!workflowId)
            return;
        try {
            const upsertResult = await this.repository.upsertWorkflowStatistics(name, workflowId);
            if (name === 'production_success' && upsertResult === 'insert') {
                const owner = await typedi_1.default.get(ownership_service_1.OwnershipService).getWorkflowOwnerCached(workflowId);
                const metrics = {
                    user_id: owner.id,
                    workflow_id: workflowId,
                };
                if (!((_a = owner.settings) === null || _a === void 0 ? void 0 : _a.userActivated)) {
                    await typedi_1.default.get(user_service_1.UserService).updateSettings(owner.id, {
                        firstSuccessfulWorkflowId: workflowId,
                        userActivated: true,
                    });
                }
                this.emit('telemetry.onFirstProductionWorkflowSuccess', metrics);
            }
        }
        catch (error) {
            n8n_workflow_1.LoggerProxy.verbose('Unable to fire first workflow success telemetry event');
        }
    }
    async nodeFetchedData(workflowId, node) {
        if (!workflowId)
            return;
        const insertResult = await this.repository.insertWorkflowStatistics("data_loaded", workflowId);
        if (insertResult === 'failed')
            return;
        const owner = await this.ownershipService.getWorkflowOwnerCached(workflowId);
        let metrics = {
            user_id: owner.id,
            workflow_id: workflowId,
            node_type: node.type,
            node_id: node.id,
        };
        if (node.credentials) {
            Object.entries(node.credentials).forEach(([credName, credDetails]) => {
                metrics = Object.assign(metrics, {
                    credential_type: credName,
                    credential_id: credDetails.id,
                });
            });
        }
        this.emit('telemetry.onFirstWorkflowDataLoad', metrics);
    }
};
exports.EventsService = EventsService = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [repositories_1.WorkflowStatisticsRepository,
        ownership_service_1.OwnershipService])
], EventsService);
//# sourceMappingURL=events.service.js.map