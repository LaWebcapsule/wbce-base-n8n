"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserService = void 0;
const typedi_1 = require("typedi");
const typeorm_1 = require("typeorm");
const User_1 = require("../databases/entities/User");
const repositories_1 = require("../databases/repositories");
let UserService = exports.UserService = class UserService {
    constructor(userRepository) {
        this.userRepository = userRepository;
    }
    async findOne(options) {
        return this.userRepository.findOne({ relations: ['globalRole'], ...options });
    }
    async findOneOrFail(options) {
        return this.userRepository.findOneOrFail({ relations: ['globalRole'], ...options });
    }
    async findMany(options) {
        return this.userRepository.find({ relations: ['globalRole'], ...options });
    }
    async findOneBy(options) {
        return this.userRepository.findOneBy(options);
    }
    create(data) {
        return this.userRepository.create(data);
    }
    async save(user) {
        return this.userRepository.save(user);
    }
    async update(userId, data) {
        return this.userRepository.update(userId, data);
    }
    async getByIds(transaction, ids) {
        return transaction.find(User_1.User, { where: { id: (0, typeorm_1.In)(ids) } });
    }
    getManager() {
        return this.userRepository.manager;
    }
    async updateSettings(userId, newSettings) {
        const { settings } = await this.userRepository.findOneOrFail({ where: { id: userId } });
        return this.userRepository.update(userId, { settings: { ...settings, ...newSettings } });
    }
    generatePasswordResetUrl(instanceBaseUrl, token) {
        const url = new URL(`${instanceBaseUrl}/change-password`);
        url.searchParams.append('token', token);
        return url.toString();
    }
};
exports.UserService = UserService = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [repositories_1.UserRepository])
], UserService);
//# sourceMappingURL=user.service.js.map