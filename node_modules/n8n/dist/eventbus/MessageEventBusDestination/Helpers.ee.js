"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLabelsForEvent = exports.getLabelValueForCredential = exports.getLabelValueForNode = exports.getMetricNameForEvent = exports.METRICS_EVENT_NAME = void 0;
const config_1 = __importDefault(require("../../config"));
exports.METRICS_EVENT_NAME = 'metrics.messageEventBus.Event';
function getMetricNameForEvent(event) {
    const prefix = config_1.default.getEnv('endpoints.metrics.prefix');
    return prefix + event.eventName.replace('n8n.', '').replace(/\./g, '_') + '_total';
}
exports.getMetricNameForEvent = getMetricNameForEvent;
function getLabelValueForNode(nodeType) {
    return nodeType.replace('n8n-nodes-', '').replace(/\./g, '_');
}
exports.getLabelValueForNode = getLabelValueForNode;
function getLabelValueForCredential(credentialType) {
    return credentialType.replace(/\./g, '_');
}
exports.getLabelValueForCredential = getLabelValueForCredential;
function getLabelsForEvent(event) {
    var _a, _b, _c, _d, _e, _f;
    switch (event.__type) {
        case "$$EventMessageAudit":
            if (event.eventName.startsWith('n8n.audit.user.credentials')) {
                return config_1.default.getEnv('endpoints.metrics.includeCredentialTypeLabel')
                    ? {
                        credential_type: getLabelValueForCredential((_a = event.payload.credentialType) !== null && _a !== void 0 ? _a : 'unknown'),
                    }
                    : {};
            }
            if (event.eventName.startsWith('n8n.audit.workflow')) {
                return config_1.default.getEnv('endpoints.metrics.includeWorkflowIdLabel')
                    ? { workflow_id: (_c = (_b = event.payload.workflowId) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : 'unknown' }
                    : {};
            }
            break;
        case "$$EventMessageNode":
            return config_1.default.getEnv('endpoints.metrics.includeNodeTypeLabel')
                ? { node_type: getLabelValueForNode((_d = event.payload.nodeType) !== null && _d !== void 0 ? _d : 'unknown') }
                : {};
        case "$$EventMessageWorkflow":
            return config_1.default.getEnv('endpoints.metrics.includeWorkflowIdLabel')
                ? { workflow_id: (_f = (_e = event.payload.workflowId) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : 'unknown' }
                : {};
    }
    return {};
}
exports.getLabelsForEvent = getLabelsForEvent;
//# sourceMappingURL=Helpers.ee.js.map