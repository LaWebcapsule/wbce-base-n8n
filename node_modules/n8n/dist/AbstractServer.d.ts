/// <reference types="node" />
import type { Server } from 'http';
import express from 'express';
import { ActiveWorkflowRunner } from './ActiveWorkflowRunner';
import { N8nInstanceType } from './Interfaces';
import type { IExternalHooksClass } from './Interfaces';
export declare abstract class AbstractServer {
    protected server: Server;
    readonly app: express.Application;
    protected externalHooks: IExternalHooksClass;
    protected activeWorkflowRunner: ActiveWorkflowRunner;
    protected protocol: string;
    protected sslKey: string;
    protected sslCert: string;
    protected timezone: string;
    protected restEndpoint: string;
    protected endpointWebhook: string;
    protected endpointWebhookTest: string;
    protected endpointWebhookWaiting: string;
    protected instanceId: string;
    protected webhooksEnabled: boolean;
    protected testWebhooksEnabled: boolean;
    readonly uniqueInstanceId: string;
    constructor(instanceType?: N8nInstanceType);
    configure(): Promise<void>;
    private setupErrorHandlers;
    private setupCommonMiddlewares;
    private setupDevMiddlewares;
    protected setupPushServer(): void;
    private setupHealthCheck;
    private setupRedis;
    init(): Promise<void>;
    start(): Promise<void>;
}
