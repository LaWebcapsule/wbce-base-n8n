"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowFilter = void 0;
const class_validator_1 = require("class-validator");
const class_transformer_1 = require("class-transformer");
const n8n_workflow_1 = require("n8n-workflow");
const utils_1 = require("../../../utils");
class WorkflowFilter {
    static async fromString(rawFilter) {
        const dto = (0, n8n_workflow_1.jsonParse)(rawFilter, { errorMessage: 'Failed to parse filter JSON' });
        if (!(0, utils_1.isObjectLiteral)(dto))
            throw new Error('Filter must be an object literal');
        const instance = (0, class_transformer_1.plainToInstance)(WorkflowFilter, dto, {
            excludeExtraneousValues: true,
            exposeUnsetFields: false,
        });
        await instance.validate();
        return (0, class_transformer_1.instanceToPlain)(instance);
    }
    async validate() {
        const result = await (0, class_validator_1.validate)(this);
        if (result.length > 0)
            throw new Error('Parsed filter does not fit the schema');
    }
}
exports.WorkflowFilter = WorkflowFilter;
__decorate([
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", String)
], WorkflowFilter.prototype, "name", void 0);
__decorate([
    (0, class_validator_1.IsBoolean)(),
    (0, class_validator_1.IsOptional)(),
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", Boolean)
], WorkflowFilter.prototype, "active", void 0);
__decorate([
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.IsString)({ each: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", Array)
], WorkflowFilter.prototype, "tags", void 0);
//# sourceMappingURL=workflow.filter.dto.js.map