import type { Application, RequestHandler } from 'express';
import type { AuthRole } from './types';
export declare const createAuthMiddleware: (authRole: AuthRole) => RequestHandler;
export declare const canSkipAuth: (method: string, path: string) => boolean;
export declare const registerController: (app: Application, config: import("convict").Config<{
    database: {
        type: string;
        tablePrefix: string;
        logging: {
            enabled: boolean;
            options: string;
            maxQueryExecutionTime: number;
        };
        postgresdb: {
            database: string;
            host: string;
            password: string;
            port: number;
            user: string;
            schema: string;
            ssl: {
                ca: string;
                cert: string;
                key: string;
                rejectUnauthorized: boolean;
            };
        };
        mysqldb: {
            database: string;
            host: string;
            password: string;
            port: number;
            user: string;
        };
        sqlite: {
            database: string;
            executeVacuumOnStartup: boolean;
        };
    };
    credentials: {
        overwrite: {
            data: string;
            endpoint: string;
        };
        defaultName: string;
    };
    workflows: {
        defaultName: string;
        onboardingFlowDisabled: boolean;
        callerPolicyDefaultOption: string;
    };
    executions: {
        process: string;
        mode: string;
        timeout: number;
        maxTimeout: number;
        saveDataOnError: string;
        saveDataOnSuccess: string;
        saveExecutionProgress: boolean;
        saveDataManualExecutions: boolean;
        pruneData: boolean;
        pruneDataMaxAge: number;
        pruneDataTimeout: number;
        pruneDataMaxCount: number;
    };
    queue: {
        health: {
            active: boolean;
            port: number;
        };
        bull: {
            prefix: string;
            redis: {
                db: number;
                host: string;
                password: string;
                port: number;
                timeoutThreshold: number;
                username: string;
                clusterNodes: string;
            };
            queueRecoveryInterval: number;
            gracefulShutdownTimeout: number;
        };
    };
    generic: {
        timezone: string;
    };
    path: string;
    host: string;
    port: number;
    listen_address: string;
    protocol: string;
    ssl_key: string;
    ssl_cert: string;
    editorBaseUrl: string;
    security: {
        restrictFileAccessTo: string;
        blockFileAccessToN8nFiles: boolean;
        audit: {
            daysAbandonedWorkflow: number;
        };
        excludeEndpoints: string;
    };
    endpoints: {
        payloadSizeMax: number;
        metrics: {
            enable: boolean;
            prefix: string;
            includeDefaultMetrics: boolean;
            includeWorkflowIdLabel: boolean;
            includeNodeTypeLabel: boolean;
            includeCredentialTypeLabel: boolean;
            includeApiEndpoints: boolean;
            includeApiPathLabel: boolean;
            includeApiMethodLabel: boolean;
            includeApiStatusCodeLabel: boolean;
            includeCacheMetrics: boolean;
            includeMessageEventBusMetrics: boolean;
        };
        rest: string;
        webhook: string;
        webhookWaiting: string;
        webhookTest: string;
        disableUi: boolean;
        disableProductionWebhooksOnMainProcess: boolean;
        skipWebhooksDeregistrationOnShutdown: boolean;
    };
    publicApi: {
        disabled: boolean;
        path: string;
        swaggerUi: {
            disabled: boolean;
        };
    };
    workflowTagsDisabled: boolean;
    userManagement: {
        jwtSecret: string;
        isInstanceOwnerSetUp: boolean;
        emails: {
            mode: string;
            smtp: {
                host: string;
                port: number;
                secure: boolean;
                auth: {
                    user: string;
                    pass: string;
                };
                sender: string;
            };
            templates: {
                invite: string;
                passwordReset: string;
            };
        };
        authenticationMethod: string;
    };
    externalFrontendHooksUrls: string;
    externalHookFiles: string;
    nodes: {
        include: undefined;
        exclude: undefined;
        errorTriggerType: string;
        communityPackages: {
            enabled: boolean;
        };
        packagesMissing: string;
    };
    logs: {
        level: string;
        output: string;
        file: {
            fileCountMax: number;
            fileSizeMax: number;
            location: string;
        };
    };
    versionNotifications: {
        enabled: boolean;
        endpoint: string;
        infoUrl: string;
    };
    templates: {
        enabled: boolean;
        host: string;
    };
    push: {
        backend: string;
    };
    binaryDataManager: {
        availableModes: string;
        mode: string;
        localStoragePath: string;
        binaryDataTTL: number;
        persistedBinaryDataTTL: number;
    };
    deployment: {
        type: string;
    };
    sso: {
        justInTimeProvisioning: boolean;
        redirectLoginToSso: boolean;
        saml: {
            loginEnabled: boolean;
            loginLabel: string;
        };
        ldap: {
            loginEnabled: boolean;
            loginLabel: string;
        };
    };
    hiringBanner: {
        enabled: boolean;
    };
    personalization: {
        enabled: boolean;
    };
    diagnostics: {
        enabled: boolean;
        config: {
            posthog: {
                apiKey: string;
                apiHost: string;
                disableSessionRecording: boolean;
            };
            sentry: {
                dsn: string;
            };
            frontend: string;
            backend: string;
        };
    };
    defaultLocale: string;
    onboardingCallPrompt: {
        enabled: boolean;
    };
    license: {
        serverUrl: string;
        autoRenewEnabled: boolean;
        autoRenewOffset: number;
        activationKey: string;
        tenantId: number;
        cert: string;
    };
    hideUsagePage: boolean;
    eventBus: {
        checkUnsentInterval: number;
        logWriter: {
            keepLogCount: number;
            maxFileSizeInKB: number;
            logBaseName: string;
        };
    };
    redis: {
        prefix: string;
    };
    cache: {
        enabled: boolean;
        backend: string;
        memory: {
            maxSize: number;
            ttl: number;
        };
        redis: {
            prefix: string;
            ttl: number;
        };
    };
    ai: {
        enabled: boolean;
    };
}>, controller: object) => void;
