import type { IDataObject, INode, IRun, ITaskData, NodeApiError, WorkflowExecuteMode, WorkflowOperationError } from 'n8n-workflow';
import { NodeOperationError, Workflow } from 'n8n-workflow';
import type { ICredentialsDb, IWorkflowErrorData, IWorkflowExecutionDataProcess } from './Interfaces';
import type { WorkflowEntity } from './databases/entities/WorkflowEntity';
import type { User } from './databases/entities/User';
import type { RoleNames } from './databases/entities/Role';
export declare function generateFailedExecutionFromError(mode: WorkflowExecuteMode, error: NodeApiError | NodeOperationError | WorkflowOperationError, node: INode): IRun;
export declare function getDataLastExecutedNodeData(inputData: IRun): ITaskData | undefined;
export declare function executeErrorWorkflow(workflowId: string, workflowErrorData: IWorkflowErrorData, runningUser: User): Promise<void>;
export declare function saveStaticData(workflow: Workflow): Promise<void>;
export declare function saveStaticDataById(workflowId: string, newStaticData: IDataObject): Promise<void>;
export declare function getStaticDataById(workflowId: string): Promise<IDataObject>;
export declare function addNodeIds(workflow: WorkflowEntity): void;
export declare function replaceInvalidCredentials(workflow: WorkflowEntity): Promise<WorkflowEntity>;
export declare function getSharedWorkflowIds(user: User, roles?: RoleNames[]): Promise<string[]>;
export declare function isBelowOnboardingThreshold(user: User): Promise<boolean>;
export declare function getNodesWithInaccessibleCreds(workflow: WorkflowEntity, userCredIds: string[]): INode[];
export declare function validateWorkflowCredentialUsage(newWorkflowVersion: WorkflowEntity, previousWorkflowVersion: WorkflowEntity, credentialsUserHasAccessTo: ICredentialsDb[]): WorkflowEntity;
export declare function getExecutionStartNode(data: IWorkflowExecutionDataProcess, workflow: Workflow): INode | undefined;
export declare function getVariables(): Promise<IDataObject>;
