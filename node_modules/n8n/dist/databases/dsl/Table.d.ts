import { QueryRunner } from 'typeorm';
import LazyPromise from 'p-lazy';
import { Column } from './Column';
declare abstract class TableOperation<R = void> extends LazyPromise<R> {
    protected tableName: string;
    protected prefix: string;
    abstract execute(queryRunner: QueryRunner): Promise<R>;
    constructor(tableName: string, prefix: string, queryRunner: QueryRunner);
}
export declare class CreateTable extends TableOperation {
    private columns;
    private indices;
    private foreignKeys;
    withColumns(...columns: Column[]): this;
    get withTimestamps(): this;
    withIndexOn(columnName: string | string[], isUnique?: boolean): this;
    withForeignKey(columnName: string, ref: {
        tableName: string;
        columnName: string;
        onDelete?: 'CASCADE';
        onUpdate?: 'CASCADE';
    }): this;
    execute(queryRunner: QueryRunner): Promise<void>;
}
export declare class DropTable extends TableOperation {
    execute(queryRunner: QueryRunner): Promise<void>;
}
export {};
