"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropTable = exports.CreateTable = void 0;
const typeorm_1 = require("typeorm");
const p_lazy_1 = __importDefault(require("p-lazy"));
const Column_1 = require("./Column");
class TableOperation extends p_lazy_1.default {
    constructor(tableName, prefix, queryRunner) {
        super((resolve) => {
            void this.execute(queryRunner).then(resolve);
        });
        this.tableName = tableName;
        this.prefix = prefix;
    }
}
class CreateTable extends TableOperation {
    constructor() {
        super(...arguments);
        this.columns = [];
        this.indices = new Set();
        this.foreignKeys = new Set();
    }
    withColumns(...columns) {
        this.columns.push(...columns);
        return this;
    }
    get withTimestamps() {
        this.columns.push(new Column_1.Column('createdAt').timestamp(3).notNull.default('NOW()'), new Column_1.Column('updatedAt').timestamp(3).notNull.default('NOW()'));
        return this;
    }
    withIndexOn(columnName, isUnique = false) {
        const columnNames = Array.isArray(columnName) ? columnName : [columnName];
        this.indices.add({ columnNames, isUnique });
        return this;
    }
    withForeignKey(columnName, ref) {
        const foreignKey = {
            columnNames: [columnName],
            referencedTableName: `${this.prefix}${ref.tableName}`,
            referencedColumnNames: [ref.columnName],
        };
        if (ref.onDelete)
            foreignKey.onDelete = ref.onDelete;
        if (ref.onUpdate)
            foreignKey.onUpdate = ref.onUpdate;
        this.foreignKeys.add(foreignKey);
        return this;
    }
    async execute(queryRunner) {
        const { driver } = queryRunner.connection;
        const { columns, tableName: name, prefix, indices, foreignKeys } = this;
        return queryRunner.createTable(new typeorm_1.Table({
            name: `${prefix}${name}`,
            columns: columns.map((c) => c.toOptions(driver)),
            ...(indices.size ? { indices: [...indices] } : {}),
            ...(foreignKeys.size ? { foreignKeys: [...foreignKeys] } : {}),
            ...('mysql' in driver ? { engine: 'InnoDB' } : {}),
        }), true);
    }
}
exports.CreateTable = CreateTable;
class DropTable extends TableOperation {
    async execute(queryRunner) {
        const { tableName: name, prefix } = this;
        return queryRunner.dropTable(`${prefix}${name}`, true);
    }
}
exports.DropTable = DropTable;
//# sourceMappingURL=Table.js.map